name: Terraform CI/CD

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 1: Check if S3 Bucket Already Exists
      - name: Check if S3 Bucket Exists
        id: check_bucket
        run: |
          BUCKET_NAME="my-terraform-storage-bucket"
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "BUCKET_EXISTS=false" >> $GITHUB_ENV
          else
            echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
          fi

      # Step 2: Create S3 Bucket Only If It Does Not Exist
      - name: Step 2 - Create S3 Bucket Without Backend
        if: env.BUCKET_EXISTS == 'false'
        run: |
          echo "S3 bucket does not exist. Temporarily removing backend configuration..."
          mv backend.tf backend.tf.disabled
          terraform init
          terraform apply -target=aws_s3_bucket.terraform_state -auto-approve

      # Step 3: Restore Backend and Reinitialize
      - name: Step 3 - Enable Backend and Reinitialize
        run: |
          echo "Re-enabling backend and reinitializing Terraform..."
          mv backend.tf.disabled backend.tf
          terraform init -force-copy

      # Step 4: Terraform Plan
      - name: Step 4 - Terraform Plan
        run: terraform plan
